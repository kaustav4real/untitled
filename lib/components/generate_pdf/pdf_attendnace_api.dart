import 'dart:io';
import 'package:pdf/widgets.dart';
import 'package:pdf/pdf.dart';
import 'package:untitled/components/generate_pdf/pdf_api.dart';

import '../../models/subject_attendance_model.dart';


class PdfAttendanceApi {
  static Future<File> generate(List<SubjectAttendanceModel> subjectAttendances) async {
    try {
      final pdf = Document();

      pdf.addPage(
        MultiPage(
          pageFormat: PdfPageFormat.a4,
          build: (Context context) {
            final List<Widget> pages = [];

            for (var i = 0; i < subjectAttendances.length; i++) {
              final subjectAttendance = subjectAttendances[i];
              pages.addAll([
                if (i != 0) // Add page break except for the first student
                  Container(height: 20), // Adjust height to control the space between student records
                buildHeader(subjectAttendance),
                SizedBox(height: 3 * PdfPageFormat.cm),
                buildAttendanceTable(subjectAttendance),
                Divider(),
              ]);
            }

            return pages;
          },
        ),
      );

      final file = await PdfApi.saveDocument(name: 'attendance_report.pdf', pdf: pdf);
      await PdfApi.openFile(file);
      return file;
    } catch (e) {
      return Future.error('PDF generation failed');
    }
  }

  static Widget buildHeader(SubjectAttendanceModel subjectAttendance) => Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        subjectAttendance.name,
        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
      ),
      SizedBox(height: 1 * PdfPageFormat.cm),
      Text(
        'Roll Number: ${subjectAttendance.rollNumber}',
        style: const TextStyle(fontSize: 18),
      ),
      SizedBox(height: 1 * PdfPageFormat.cm),
      Text(
        'Attendance Percentage: ${calculateAttendancePercentage(subjectAttendance.attendance).toStringAsFixed(2)}%',
        style: const TextStyle(fontSize: 18),
      ),
    ],
  );

  static double calculateAttendancePercentage(List<AttendanceDetailModel> attendance) {
    if (attendance.isEmpty) return 0.0;
    final presentDays = attendance.where((detail) => detail.present).length;
    return (presentDays / attendance.length) * 100;
  }

  static Widget buildAttendanceTable(SubjectAttendanceModel subjectAttendance) {
    final headers = ['Date', 'Present', 'Class Number'];
    final data = subjectAttendance.attendance.map((detail) {
      return [
        detail.date,
        detail.present ? 'Yes' : 'No',
        detail.classNumber.toString(),
      ];
    }).toList();

    return TableHelper.fromTextArray(
      headers: headers,
      data: data,
      border: null,
      headerStyle: TextStyle(fontWeight: FontWeight.bold),
      headerDecoration: const BoxDecoration(color: PdfColors.grey300),
      cellHeight: 30,
      cellAlignments: {
        0: Alignment.centerLeft,
        1: Alignment.center,
        2: Alignment.centerRight,
      },
    );
  }

  static Widget buildFooter() => Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      Divider(),
      SizedBox(height: 2 * PdfPageFormat.mm),
      Text('Generated by Attendance System'),
    ],
  );
}